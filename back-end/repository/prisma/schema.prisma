// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  email             String            @unique
  password          String

  characterId       Int?              @unique
  character         Character?        @relation(fields: [characterId], references: [id])
}

model Character {
  id                Int               @id @default(autoincrement())
  name              String
  level             Int
  xp                Int
  strength          Int
  speed             Int
  magic             Int
  dexterity         Int
  healthPoints      Int
  manaPoints        Int
  luck              Int
  defense           Int
  magicDefense      Int
  progress          Json
  characterClass    String
  user              User?             @relation

  moves             Move[]
  battle            Battle?
}

model Move {
  id                Int               @id @default(autoincrement())
  name              String
  attack            Int               @default(0)
  magicAttack       Int               @default(0)
  manaPoints        Int               @default(0)
  aoe               Boolean
  statusEffect      String?           // "burn", "freeze", "stun",
  cooldown          Int?

  elements          Element[]         @relation("MoveElement")
  characters        Character[]
  enemies           Enemy[]
}

model Element {
  id                Int               @id @default(autoincrement())
  name              String            @unique

  enemies           Enemy[]           @relation("EnemyElement")
  moves             Move[]            @relation("MoveElement")

  strongAgainst     Element[]         @relation("ElementStrengths")
  strongAgainstBy   Element[]         @relation("ElementStrengths")
}

model Enemy {
  id                Int               @id @default(autoincrement())
  name              String
  strength          Int
  speed             Int
  magic             Int
  dexterity         Int
  healthPoints      Int
  manaPoints        Int
  luck              Int
  defense           Int
  magicDefense      Int
  world             Int
  isBoss            Boolean
  isTemplate        Boolean           @default(false)

  elements          Element[]         @relation("EnemyElement")
  moves             Move[]
  battles           Battle[]
}

model Battle {
  id                Int               @id @default(autoincrement())
  turnCount         Int
  currentTurn       String            // "player" or "enemy"
  enemies           Enemy[]
  character         Character         @relation(fields: [characterId], references: [id])
  characterId       Int               @unique
  reward            Json              // { gold, xp & items[] }
  createdAt         DateTime          @default(now())
}
